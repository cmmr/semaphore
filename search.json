[{"path":"https://cmmr.github.io/semaphore/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 semaphore authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://cmmr.github.io/semaphore/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daniel P. Smith. Author, maintainer. Alkek Center Metagenomics Microbiome Research. Copyright holder, funder.","code":""},{"path":"https://cmmr.github.io/semaphore/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Smith D (2024). semaphore: Interprocess Communication via Shared Memory Atomic Operations. R package version 0.1.0.9000, https://cmmr.github.io/semaphore/.","code":"@Manual{,   title = {semaphore: Interprocess Communication via Shared Memory Atomic Operations},   author = {Daniel P. Smith},   year = {2024},   note = {R package version 0.1.0.9000},   url = {https://cmmr.github.io/semaphore/}, }"},{"path":"https://cmmr.github.io/semaphore/index.html","id":"semaphore","dir":"","previous_headings":"","what":"Interprocess Communication via Shared Memory Atomic Operations","title":"Interprocess Communication via Shared Memory Atomic Operations","text":"goal semaphore enable synchronization concurrent R processes. Implements named semaphores Boost C++ library. semaphore object shared amongst several processes. integer value can safely incremented decremented multiple processes. Processes can also wait (blocking) value become non-zero.","code":""},{"path":"https://cmmr.github.io/semaphore/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Interprocess Communication via Shared Memory Atomic Operations","text":"","code":"# Install the latest stable version from CRAN: install.packages(\"semaphore\")  # Or the development version from GitHub: install.packages(\"pak\") pak::pak(\"cmmr/semaphore\")"},{"path":"https://cmmr.github.io/semaphore/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Interprocess Communication via Shared Memory Atomic Operations","text":"","code":"library(semaphore)  s <- create_semaphore() print(s) #> [1] \"uUkKpNMbTVgaborHG4rH\"  increment_semaphore(s)  decrement_semaphore(s, wait = FALSE) #> [1] TRUE decrement_semaphore(s, wait = FALSE) #> [1] FALSE  remove_semaphore(s) #> [1] TRUE"},{"path":"https://cmmr.github.io/semaphore/reference/create_semaphore.html","id":null,"dir":"Reference","previous_headings":"","what":"Shared Memory Atomic Operations — create_semaphore","title":"Shared Memory Atomic Operations — create_semaphore","text":"semaphore integer operating system keeps track . process knows semaphore's identifier can increment decrement value, though decremented zero. semaphore zero, calling decrement_semaphore(wait = FALSE) return FALSE whereas decrement_semaphore(wait = TRUE) block semaphore incremented another process. multiple processes blocked, single call increment unblock one blocked processes.","code":""},{"path":"https://cmmr.github.io/semaphore/reference/create_semaphore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shared Memory Atomic Operations — create_semaphore","text":"","code":"create_semaphore(value = 0)  increment_semaphore(semaphore)  decrement_semaphore(semaphore, wait = TRUE)  remove_semaphore(semaphore)"},{"path":"https://cmmr.github.io/semaphore/reference/create_semaphore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shared Memory Atomic Operations — create_semaphore","text":"value initial value semaphore. semaphore semaphore identifier, generated create_semaphore(). wait TRUE, blocks semaphore greater zero.","code":""},{"path":"https://cmmr.github.io/semaphore/reference/create_semaphore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shared Memory Atomic Operations — create_semaphore","text":"create_semaphore() - semaphore identifier (string). increment_semaphore() - NULL, invisibly. decrement_semaphore() - TRUE success; FALSE otherwise. remove_semaphore() - TRUE success; FALSE error.","code":""},{"path":"https://cmmr.github.io/semaphore/reference/create_semaphore.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shared Memory Atomic Operations — create_semaphore","text":"","code":"library(semaphore)           s <- create_semaphore()     print(s) #> [1] \"uyBDaJkdFL1SDvppj0X5\"          increment_semaphore(s)     decrement_semaphore(s, wait = FALSE) #> [1] TRUE     decrement_semaphore(s, wait = FALSE) #> [1] FALSE          remove_semaphore(s) #> [1] TRUE"}]
